services:
  web:
    container_name: flask-app
    build:
      context: .
      dockerfile: Dockerfile
      args:
        REQ_FILE: ${REQ_FILE}
    environment:
      # Database configuration
      - DATABASE_URL
      - DATABASE_USERNAME
      - DATABASE_PASSWORD
      - DATABASE_NAME
      - DATABASE_HOST
      - DATABASE_PORT
      # Flask configuration
      - FLASK_APP
      - FLASK_ENV
      - FLASK_SECRET_KEY
      - CSRF_SECRET_KEY
      # External services
      - SITEKEY
      - RECAPTCHA_SECRET_KEY
    depends_on:
      - db
    entrypoint: [ "./entrypoint.sh" ]
    volumes:
      - .:/app # Live sync local files with container
      - persistent_env:/app/persistent # Persist environment variables across deployments
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  db:
    container_name: postgres-db
    image: postgres:bullseye
    restart: always
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "8888:5432"
    volumes:
      # Persist PostgreSQL data
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network

  nginx:
    container_name: nginx-proxy
    restart: unless-stopped
    image: nginx:stable-perl
    ports:
      # Expose nginx on port 80 and 443 (http / https)
      - "80:80"
      - "443:443"
    volumes:
      # Mount main nginx.conf.
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      # Mount server block config depending on environment.
      - ./nginx/${NGINX_CONF_FILE}:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - certbot-var:/var/lib/letsencrypt
    depends_on:
      - web
    networks:
      - backend-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    entrypoint: "/bin/sh -c"
    command: >
      "trap exit TERM; while :; do sleep 6h & wait $${!}; certbot renew; done"
    networks:
      - backend-network

  eslint:
    container_name: eslint-runner
    build:
      context: .
      dockerfile: Dockerfile.eslint
    volumes:
      # Mount project folder.
      - .:/app
    working_dir: /app
    command: [ "npx", "eslint", "." ]
    networks:
      - backend-network

volumes:
  postgres_data:
  certbot-etc:
  certbot-var:
  persistent_env:
    # This volume will persist environment variables across deployments
    driver: local

networks:
  backend-network:
    driver: bridge